// ===================================
// üìÑ server.js - TAR Calculator API v2.0
// Avec OpenAI + Bar√®mes complets 2026
// ===================================
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const { getJson } = require("serpapi");

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "public")));

// Charger les bar√®mes complets
let SWICO_DATA, SENS_DATA, INOBAT_DATA;

try {
  SWICO_DATA = JSON.parse(fs.readFileSync(path.join(__dirname, 'swico-complet-2026.json'), 'utf8'));
  SENS_DATA = JSON.parse(fs.readFileSync(path.join(__dirname, 'sens-complet-2026.json'), 'utf8'));
  INOBAT_DATA = JSON.parse(fs.readFileSync(path.join(__dirname, 'inobat-complet-2026.json'), 'utf8'));
  console.log('‚úÖ Bar√®mes complets charg√©s');
  console.log(`üìä SWICO: ${Object.values(SWICO_DATA.categories).flat().length} produits`);
  console.log(`üì¶ SENS: ${Object.keys(SENS_DATA.categories).length} cat√©gories`);
  console.log(`üîã INOBAT: ${Object.keys(INOBAT_DATA.categories).length} cat√©gories`);
} catch (error) {
  console.error('‚ùå Erreur chargement bar√®mes:', error);
  process.exit(1);
}

// Taux de TVA Suisse
const TVA_RATES = {
  NORMAL: 8.1,
  REDUIT: 2.6,
  SPECIAL: 3.8,
  ZERO: 0
};


// Fonction de recherche Google via SerpAPI
async function searchProductByEAN(ean) {
  if (!ean || !process.env.SERPAPI_KEY) {
    return null;
  }
  
  try {
    console.log(`üîç Recherche Google pour EAN ${ean}...`);
    
    const response = await getJson({
      engine: "google",
      q: ean,
      api_key: process.env.SERPAPI_KEY,
      num: 5
    });
    
    if (!response.organic_results || response.organic_results.length === 0) {
      console.log("‚ùå Aucun r√©sultat Google trouv√©");
      return null;
    }
    
    // Extraire les informations des premiers r√©sultats
    const results = response.organic_results.slice(0, 3);
    const texts = results.map(r => `${r.title} - ${r.snippet}`).join("\n");
    
    console.log("‚úÖ R√©sultats Google obtenus");
    return {
      query: ean,
      results: texts,
      urls: results.map(r => r.link)
    };
    
  } catch (error) {
    console.error("‚ùå Erreur SerpAPI:", error.message);
    return null;
  }
}

// Fonction pour enrichir les donn√©es produit avec OpenAI
// Fonction pour rechercher un EAN dans une base de donn√©es externe
async function lookupEAN(ean) {
  if (!ean || ean.length < 8) return null;
  
  try {
    // Tentative 1 : API gratuite EAN-Search.org
    const response = await fetch(`https://api.ean-search.org/api?token=free&op=barcode-lookup&format=json&ean=${ean}`);
    
    if (response.ok) {
      const data = await response.json();
      if (data && data.length > 0 && data[0].name) {
        return {
          name: data[0].name,
          brand: data[0].company || null,
          category: data[0].categoryName || null,
          source: 'ean-search.org'
        };
      }
    }
  } catch (error) {
    console.log('EAN lookup failed:', error.message);
  }
  
  return null;
}

async function enrichProductData(ean, description, marque, poids, refFournisseur) {
  try {
    // Recherche EAN dans base externe
    // ETAPE 1: Recherche Google via SerpAPI
    if (ean && process.env.SERPAPI_KEY) {
      const googleResults = await searchProductByEAN(ean);
      if (googleResults && googleResults.results) {
        // Utiliser GPT pour extraire les infos des resultats Google
        const extractPrompt = `Analyse ces resultats de recherche Google pour EAN ${ean}:

${googleResults.results}

Extrait le nom exact du produit, la marque, et le poids si mentionne.

Reponds en JSON: {"nom": "nom complet", "marque": "marque", "poids_kg": nombre_ou_null}`;
        
        try {
          const extraction = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [{role: "user", content: extractPrompt}],
            temperature: 0.2,
            response_format: { type: "json_object" }
          });
          
          const extracted = JSON.parse(extraction.choices[0].message.content);
          if (extracted.nom) {
            console.log(`‚úÖ Google trouve: ${extracted.nom}`);
            description = extracted.nom;
            marque = extracted.marque || marque;
            poids = extracted.poids_kg || poids;
          }
        } catch (e) {
          console.log("‚ö†Ô∏è Erreur extraction Google:", e.message);
        }
      }
    }

    if (ean) {
      try {
        const eanResponse = await fetch(`https://api.ean-search.org/api?token=free&op=barcode-lookup&format=json&ean=${ean}`);
        if (eanResponse.ok) {
          const eanResult = await eanResponse.json();
          if (eanResult && eanResult.length > 0 && eanResult[0].name) {
            console.log(`‚úÖ EAN trouv√©: ${eanResult[0].name}`);
            description = eanResult[0].name;
            marque = eanResult[0].company || marque;
          }
        }
      } catch (e) {
        console.log("‚ö†Ô∏è Erreur recherche EAN:", e.message);
      }
    }

    const prompt = `Tu es un expert en identification de produits avec acc√®s √† une base de donn√©es mondiale de codes EAN.

üìä DONN√âES FOURNIES :
${ean ? `- üî¢ Code EAN: ${ean} (PRIORIT√â ABSOLUE - Recherche d'abord le produit par ce code)` : ''}
${description ? `- üìù Description: ${description}` : ''}
${marque ? `- üè∑Ô∏è Marque: ${marque}` : ''}
${poids ? `- ‚öñÔ∏è Poids: ${poids} kg` : ''}
${refFournisseur ? `- üìã R√©f√©rence: ${refFournisseur}` : ''}

üéØ R√àGLES DE PRIORIT√â (ORDRE STRICT) :
1. **Si un EAN est fourni** : 
   - Recherche PRIORITAIREMENT le produit r√©el correspondant √† cet EAN dans tes connaissances
   - IGNORE toute description/marque contradictoire fournie par l'utilisateur
   - Remplis TOUTES les informations depuis l'EAN (nom exact, marque r√©elle, poids, cat√©gorie)
   - Confiance : 95-100 si EAN trouv√© dans tes donn√©es
   - ‚ö†Ô∏è ATTENTION: V√©rifie la date de sortie du produit. Privil√©gie toujours le mod√®le le plus r√©cent si plusieurs correspondent
   - Pour les gammes Sonos: Five (2020) a remplac√© Play:5, One a remplac√© Play:1

2. **Si EAN inconnu mais description fournie** :
   - Utilise la description comme r√©f√©rence
   - Estime les informations manquantes
   - Confiance : 70-85

3. **Si aucun EAN** :
   - Base-toi sur description + marque
   - Confiance : 60-80

‚ö†Ô∏è EXEMPLES CRITIQUES DE PRIORIT√â EAN :

**Exemple 1 - EAN prioritaire m√™me si description erron√©e :**
Entr√©e : EAN=3663701006329, Description=Kontrol S2, Marque=Native Instruments
‚Üí Le produit R√âEL pour cet EAN est Dualo du-touch S (instrument de musique)
‚Üí Tu DOIS retourner : nom=Dualo du-touch S, marque=Dualo, categorie=instrument_musique
‚Üí Tu NE DOIS PAS utiliser la description Kontrol S2 qui est contradictoire

**Exemple 1b - Sonos Five vs Play:1 :**
n**Exemple 1c - Sonos Move 2 :**
Entree : EAN=8720862501478, Description=enceinte
‚Üí Le produit REEL est Sonos Move 2 (enceinte portable, 3 kg, 499 EUR)
‚Üí Retourne : nom=Sonos Move 2, marque=Sonos, poids=3.0, categorie=enceinte
‚Üí NE CONFONDS PAS avec dautres produits Philips ou autres marques
Entr√©e : EAN=8717755777126, Description=enceinte
‚Üí Recherche le produit EXACT pour cet EAN dans tes connaissances
‚Üí Si cet EAN correspond √† Sonos Five : retourne nom=Sonos Five, marque=Sonos
‚Üí Si tes donn√©es sont incertaines, privil√©gie les informations les plus r√©centes
‚Üí IMPORTANT: Sonos Five (lanc√© 2020) a remplac√© Sonos Play:5 (2015)
‚Üí Tu NE DOIS PAS utiliser la description Kontrol S2 qui est contradictoire

**Exemple 2 - EAN inconnu, utiliser description :**
Entr√©e : EAN=9999999999999, Description=iPhone 15 Pro, Marque=Apple
‚Üí EAN inconnu dans tes donn√©es
‚Üí Tu peux utiliser la description : nom=iPhone 15 Pro, marque=Apple, confiance=75

**Exemple 3 - Pas d'EAN :**
Entr√©e : Description=Smartphone derni√®re g√©n√©ration, Marque=Samsung
‚Üí Estime le meilleur match : nom=Samsung Galaxy S24, confiance=70

üìã FORMAT JSON ATTENDU :
   - Base-toi sur description + marque
   - Confiance : 60-80

üìã FORMAT JSON ATTENDU :
{
  "nom_produit": "Nom complet EXACT du produit (depuis EAN si disponible)",
  "marque": "Marque R√âELLE (depuis EAN si disponible)",
  "categorie": "smartphone|tablette|ordinateur|ecran|instrument_musique|imprimante|console|pile|batterie|electromenager|refrigeration|autoradio|enceinte|casque|appareil_photo|non_soumis",
  "poids_kg": nombre (trouve le poids r√©el depuis EAN, sinon estime),
  "taille_pouces": nombre ou null (pour √©crans/ordinateurs/instruments),
  "organisme_tar": "swico|innobat|sens|aucun",
  "type_tva_suisse": "normal|reduit|special|zero",
  "raison_tva": "Explication courte du taux TVA",
  "confiance": nombre (95-100 si EAN connu, 70-85 si d√©duit, 50-69 si incertain)
}

üè∑Ô∏è CAT√âGORIES D√âTAILL√âES :

üì± organisme_tar = "swico" pour :
   - Smartphones, tablettes, ordinateurs (laptop/desktop)
   - √âcrans, TV, moniteurs
   - Consoles de jeux, imprimantes, scanners
   - Appareils photo, cam√©ras
   - Enceintes amplifi√©es, casques avec √©lectronique
   - **INSTRUMENTS DE MUSIQUE √âLECTRONIQUES** (synth√©s, contr√¥leurs MIDI, pianos num√©riques)
   - Autoradios, GPS, drones

üè† organisme_tar = "sens" pour :
   - R√©frig√©rateurs, cong√©lateurs, machines √† laver, lave-vaisselle
   - Cuisini√®res, fours, micro-ondes, BOUILLOIRES
   - Grille-pain, cafeti√®res, mixeurs, robots cuisine
   - Aspirateurs, fers √† repasser, s√®che-cheveux
   - Cigarettes √©lectroniques, vaporettes
   - Radiateurs, ventilateurs, climatiseurs

üîã organisme_tar = "innobat" pour :
   - Piles portables (AA, AAA, 9V, etc.)
   - Batteries rechargeables portables

‚ùå organisme_tar = "aucun" pour :
   - V√™tements, lunettes sans √©lectronique, bijoux
   - Livres, jouets purement m√©caniques
   - Meubles, d√©coration

üí≥ type_tva_suisse :
   - "normal" (8.1%) : √©lectronique, √©lectrom√©nager, instruments musique
   - "reduit" (2.6%) : livres, journaux, m√©dicaments, alimentation
   - "special" (3.8%) : h√©bergement
   - "zero" (0%) : exportations

‚ö†Ô∏è RAPPEL CRITIQUE : Si EAN fourni, TROUVE LE VRAI PRODUIT correspondant √† ce code, ne te base PAS sur une description potentiellement erron√©e !

R√©ponds UNIQUEMENT avec le JSON, sans texte avant ou apr√®s.`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.3,
      response_format: { type: 'json_object' }
    });

    const result = JSON.parse(completion.choices[0].message.content);
    return result;

  } catch (error) {
    console.error('‚ùå Erreur OpenAI:', error);
    throw new Error('Impossible d\'identifier le produit avec l\'IA');
  }
}
// Fonction pour calculer la TAR avec les bar√®mes complets
function calculateTAR(productData) {
  const { organisme_tar, categorie, poids_kg, taille_pouces, nom_produit } = productData;

  let tarifHT = 0;
  let typeApplique = '';

  // Produits non soumis √† la TAR
  if (organisme_tar === 'aucun') {
    return {
      tarifHT: '0.00',
      typeApplique: 'Non soumis √† la TAR',
      nonSoumis: true
    };
  }

  // SWICO - Recherche dans les bar√®mes complets
  if (organisme_tar === 'swico') {
    // Smartphones
    if (categorie === 'smartphone') {
      tarifHT = 0.19; // Tarif SWICO correct
      typeApplique = 'Smartphone/Smartwatch';
    }
    // Tablettes
    else if (categorie === 'tablette') {
      tarifHT = 0.46;
      typeApplique = 'Tablette';
    }
    // Ordinateurs portables
    else if (categorie === 'ordinateur') {
      const taille = taille_pouces || 14;
      if (taille < 12) {
        tarifHT = 2.31;
        typeApplique = 'Notebook < 12"';
      } else {
        tarifHT = 5.57;
        typeApplique = 'Notebook ‚â• 12"';
      }
    }
    // √âcrans / TV
    else if (categorie === 'ecran') {
      const taille = taille_pouces || 24;
      if (taille < 8) {
        tarifHT = 0.19;
        typeApplique = '√âcran < 8"';
      } else if (taille < 15) {
        tarifHT = 2.31;
        typeApplique = '√âcran 8-14"';
      } else if (taille < 33) {
        tarifHT = 5.57;
        typeApplique = '√âcran 15-32"';
      } else if (taille < 45) {
        tarifHT = 13.88;
        typeApplique = '√âcran 33-44"';
      } else if (taille < 55) {
        tarifHT = 18.50;
        typeApplique = '√âcran 45-54"';
      } else if (taille < 70) {
        tarifHT = 27.75;
        typeApplique = '√âcran 55-69"';
      } else if (taille < 90) {
        tarifHT = 37.00;
        typeApplique = '√âcran 70-89"';
      } else {
        tarifHT = 46.25;
        typeApplique = '√âcran ‚â• 90"';
      }
    }
    // Imprimantes
    else if (categorie === 'imprimante') {
      tarifHT = 2.31;
      typeApplique = 'Imprimante/Scanner';
    }
    // Consoles
    else if (categorie === 'console') {
      tarifHT = 2.31;
      typeApplique = 'Console de jeux';
    }
    // Enceintes et casques
    // Enceintes et haut-parleurs (selon poids/type)
    else if (categorie === 'enceinte') {
      const poids = poids_kg || 1;
      if (poids >= 1.5) {
        tarifHT = 2.31;
        typeApplique = 'Haut-parleur / Subwoofer';
      } else {
        tarifHT = 0.46;
        typeApplique = 'Enceinte portable/voyage';
      }
    }
    // Casques audio
    else if (categorie === 'casque') {
      tarifHT = 0.46;
      typeApplique = 'Casque audio';
    }
    // Appareils photo
    else if (categorie === 'appareil_photo') {
      tarifHT = 0.46;
      typeApplique = 'Appareil photo';
    }
    // Autoradio
    else if (categorie === 'autoradio') {
      tarifHT = 2.31;
      typeApplique = 'Autoradio/Syst√®me audio';
    }
    // Instruments de musique
    else if (categorie === 'instrument_musique') {
      const poids = poids_kg || 2;
      if (poids < 3) {
        tarifHT = 2.31;
        typeApplique = 'Instrument de musique < 3kg';
      } else {
        tarifHT = 5.57;
        typeApplique = 'Instrument de musique ‚â• 3kg';
      }
    }
  }
  
  // INOBAT - Batteries
  else if (organisme_tar === 'innobat') {
    const poids = poids_kg || 0.25;
    
    if (categorie === 'pile') {
      // Piles standards
      tarifHT = 0.05;
      typeApplique = 'Pile standard';
    } else if (categorie === 'batterie') {
      // Batteries rechargeables par poids
      if (poids < 0.25) {
        tarifHT = 0.25;
        typeApplique = 'Batterie < 250g';
      } else if (poids < 0.75) {
        tarifHT = 0.80;
        typeApplique = 'Batterie 250-750g';
      } else if (poids < 5) {
        tarifHT = 1.60;
        typeApplique = 'Batterie 750g-5kg';
      } else {
        tarifHT = 9.60;
        typeApplique = 'Batterie 5-15kg';
      }
    }
  }
  
  // SENS - √âlectrom√©nager
  else if (organisme_tar === 'sens') {
    const poids = poids_kg || 1;
    
    if (categorie === 'refrigeration') {
      // R√©frig√©ration
      const tranches = SENS_DATA.categories['200_Refrigeration'].tranches;
      const tranche = tranches.find(t => poids >= t.poidsMin && poids < t.poidsMax);
      if (tranche) {
        tarifHT = tranche.tarifHT;
        typeApplique = `R√©frig√©ration ${tranche.poidsMin}-${tranche.poidsMax}kg`;
      }
    } else {
      // √âlectrom√©nager g√©n√©ral
      const tranches = SENS_DATA.categories['100_SENS_General'].tranches;
      const tranche = tranches.find(t => poids >= t.poidsMin && poids < t.poidsMax);
      if (tranche) {
        tarifHT = tranche.tarifHT;
        typeApplique = `√âlectrom√©nager ${tranche.poidsMin}-${tranche.poidsMax}kg`;
      }
    }
  }

  return {
    tarifHT: tarifHT.toFixed(2),
    typeApplique
  };
}

// Route principale de calcul TAR
app.post('/api/calculate-tar', async (req, res) => {
  try {
    const { ean, description, marque, poids, refFournisseur } = req.body;

    console.log('üì• Requ√™te:', { ean, description, marque, poids });

    // Validation
    if (!ean && !description) {
      return res.status(400).json({
        success: false,
        error: 'Veuillez fournir au moins un code EAN ou une description'
      });
    }

    // Enrichissement via OpenAI
    const productData = await enrichProductData(
      ean,
      description,
      marque,
      poids,
      refFournisseur
    );

    console.log('‚úÖ Produit identifi√©:', productData.nom_produit);

    // M√©thode de recherche
    const searchMethod = ean && description ? 'üéØ EAN + Description' :
                        ean ? 'üéØ EAN' :
                        'üîç Description';

    // Calcul de la TAR
    const { tarifHT, typeApplique, nonSoumis } = calculateTAR(productData);

    // Si produit non soumis
    if (nonSoumis) {
      return res.json({
        success: true,
        product: {
          nom: productData.nom_produit,
          marque: productData.marque,
          poids: productData.poids_kg,
          taille: productData.taille_pouces
        },
        tar: {
          organisme: 'AUCUN',
          type: 'Non soumis √† la TAR',
          tarifHT: '0.00',
          tarifTTC: '0.00',
          tva: 0,
          raisonTVA: 'Produit non soumis √† la taxe anticip√©e de recyclage'
        },
        nonSoumis: true,
        confidence: productData.confiance,
        searchMethod
      });
    }

    // Calcul TVA
    const tvaRate = productData.type_tva_suisse === 'normal' ? TVA_RATES.NORMAL :
                   productData.type_tva_suisse === 'reduit' ? TVA_RATES.REDUIT :
                   productData.type_tva_suisse === 'special' ? TVA_RATES.SPECIAL :
                   TVA_RATES.ZERO;

    const tarifTTC = (parseFloat(tarifHT) * (1 + tvaRate / 100)).toFixed(2);

    // R√©ponse
    res.json({
      success: true,
      product: {
        nom: productData.nom_produit,
        marque: productData.marque,
        poids: productData.poids_kg,
        taille: productData.taille_pouces
      },
      tar: {
        organisme: productData.organisme_tar.toUpperCase(),
        type: typeApplique,
        tarifHT,
        tarifTTC,
        tva: tvaRate,
        raisonTVA: productData.raison_tva
      },
      confidence: productData.confiance,
      searchMethod
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Erreur lors du calcul'
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: '2.0.0',
    timestamp: new Date().toISOString(),
    baremes: {
      swico: 'Complet 2026',
      sens: 'Complet 2026',
      inobat: 'Complet 2026'
    }
  });
});

// Route racine
app.get('/', (req, res) => {
  res.json({
    service: 'TAR Calculator API',
    version: '2.0.0',
    endpoints: {
      calculate: 'POST /api/calculate-tar',
      health: 'GET /health'
    }
  });
});

// D√©marrage
app.listen(PORT, () => {
  console.log(`‚úÖ Serveur TAR Calculator v2.0 d√©marr√© sur le port ${PORT}`);
  console.log(`üåê Health check: http://localhost:${PORT}/health`);
  console.log(`ü§ñ OpenAI: ${openai.apiKey ? 'Configur√©' : 'NON configur√©'}`);
});
